const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
const API_KEY = 'test-api-key-123'; // Substitua pela sua chave API real

async function testCSPFix() {
  try {
    console.log('üß™ Testando corre√ß√µes de CSP...\n');

    // 1. Criar um pagamento para testar
    console.log('1Ô∏è‚É£ Criando pagamento para teste...');
    const createPaymentResponse = await axios.post(`${BASE_URL}/api/v1/payments/create`, {
      amount: 35.00,
      currency: 'MZN',
      customer: {
        phone: '+258841234567',
        name: 'Teste CSP',
        email: 'teste@example.com'
      },
      returnUrl: 'https://example.com/success'
    }, {
      headers: {
        'X-API-Key': API_KEY,
        'Content-Type': 'application/json'
      }
    });

    if (createPaymentResponse.data.success) {
      const paymentData = createPaymentResponse.data.data;
      console.log('‚úÖ Pagamento criado com sucesso!');
      console.log(`   ID: ${paymentData.externalPayment.id}`);
      console.log(`   Link: ${paymentData.link}`);
      console.log(`   Tipo: ${paymentData.responseType}\n`);

      // 2. Testar formul√°rio de pagamento
      console.log('2Ô∏è‚É£ Testando acesso ao formul√°rio...');
      try {
        const formResponse = await axios.get(`${paymentData.link}`);
        if (formResponse.status === 200) {
          console.log('‚úÖ Formul√°rio de pagamento acess√≠vel!');
          console.log(`   URL: ${paymentData.link}`);
          
          // Verificar se o HTML cont√©m os elementos necess√°rios
          const html = formResponse.data;
          const hasForm = html.includes('id="paymentForm"');
          const hasPhoneInput = html.includes('id="phone"');
          const hasButton = html.includes('id="payButton"');
          const hasExternalJS = html.includes('src="/js/payment-form.js"');
          const hasPaymentData = html.includes('id="payment-data"');
          const hasNoInlineScript = !html.includes('<script>') || html.includes('type="application/json"');
          
          console.log(`   ‚úÖ Formul√°rio: ${hasForm ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Campo telefone: ${hasPhoneInput ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Bot√£o: ${hasButton ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ JavaScript externo: ${hasExternalJS ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Dados do pagamento: ${hasPaymentData ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Sem scripts inline: ${hasNoInlineScript ? 'Sim' : 'N√£o'}`);
          
          // Verificar se n√£o h√° atributos problem√°ticos
          const hasMethodPost = html.includes('method="POST"');
          const hasAction = html.includes('action=');
          const hasTypeSubmit = html.includes('type="submit"');
          
          console.log(`   ‚úÖ Sem method POST: ${!hasMethodPost ? 'Sim' : 'N√£o'}`);
          console.log(`   ‚úÖ Sem action: ${!hasAction ? 'Sim' : 'N√£o'}`);
          console.log(`   ‚úÖ Bot√£o type button: ${!hasTypeSubmit ? 'Sim' : 'N√£o'}`);
          
          if (hasMethodPost || hasAction || hasTypeSubmit) {
            console.log('   ‚ö†Ô∏è ATEN√á√ÉO: Formul√°rio ainda tem atributos problem√°ticos!');
          }
        }
      } catch (formError) {
        console.log('‚ùå Erro ao acessar formul√°rio:', formError.message);
      }

      // 3. Testar se o arquivo JavaScript est√° acess√≠vel
      console.log('\n3Ô∏è‚É£ Testando acesso ao arquivo JavaScript...');
      try {
        const jsResponse = await axios.get(`${BASE_URL}/js/payment-form.js`);
        if (jsResponse.status === 200) {
          console.log('‚úÖ Arquivo JavaScript acess√≠vel!');
          console.log(`   Tamanho: ${jsResponse.data.length} caracteres`);
          
          // Verificar se cont√©m as fun√ß√µes necess√°rias
          const jsContent = jsResponse.data;
          const hasProcessPayment = jsContent.includes('processPayment');
          const hasShowPopup = jsContent.includes('showPopup');
          const hasPollPaymentStatus = jsContent.includes('pollPaymentStatus');
          
          console.log(`   ‚úÖ Fun√ß√£o processPayment: ${hasProcessPayment ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Fun√ß√£o showPopup: ${hasShowPopup ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Fun√ß√£o pollPaymentStatus: ${hasPollPaymentStatus ? 'Presente' : 'Ausente'}`);
        }
      } catch (jsError) {
        console.log('‚ùå Erro ao acessar JavaScript:', jsError.message);
      }

      // 4. Testar processamento M-Pesa
      console.log('\n4Ô∏è‚É£ Testando processamento M-Pesa...');
      const mpesaResponse = await axios.post(`${BASE_URL}/api/v1/payments/process-mpesa`, {
        paymentId: paymentData.externalPayment.id,
        phone: '+258841234567',
        amount: 35.00,
        currency: 'MZN'
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (mpesaResponse.data.success) {
        console.log('‚úÖ Pagamento M-Pesa processado com sucesso!');
        console.log(`   Transaction ID: ${mpesaResponse.data.data.transactionId}`);
        console.log(`   Status: ${mpesaResponse.data.data.status}`);
      } else {
        console.log('‚ùå Erro ao processar pagamento M-Pesa:', mpesaResponse.data.message);
      }

    } else {
      console.log('‚ùå Erro ao criar pagamento:', createPaymentResponse.data.message);
    }

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Dados:', error.response.data);
    }
  }
}

async function runTest() {
  console.log('üöÄ Iniciando teste de corre√ß√µes de CSP...\n');
  
  await testCSPFix();
  
  console.log('\n‚ú® Teste conclu√≠do!');
  console.log('\nüìã Resumo das corre√ß√µes implementadas:');
  console.log('   ‚úÖ JavaScript movido para arquivo externo');
  console.log('   ‚úÖ Formul√°rio sem atributos problem√°ticos');
  console.log('   ‚úÖ CSP configurado para permitir arquivos externos');
  console.log('   ‚úÖ Arquivos est√°ticos configurados');
  console.log('   ‚úÖ Sem scripts inline no HTML');
  console.log('\nüéØ Para testar manualmente:');
  console.log('   1. Acesse o formul√°rio de pagamento');
  console.log('   2. Abra o DevTools (F12)');
  console.log('   3. V√° para a aba Console');
  console.log('   4. Digite um telefone v√°lido');
  console.log('   5. Clique em "Pagar com M-Pesa"');
  console.log('   6. Verifique se n√£o h√° erros de CSP');
  console.log('   7. Verifique se os popups aparecem');
}

// Executar teste se o script for chamado diretamente
if (require.main === module) {
  runTest().catch(console.error);
}

module.exports = {
  testCSPFix,
  runTest
};
