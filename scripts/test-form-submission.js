const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
const API_KEY = 'test-api-key-123'; // Substitua pela sua chave API real

async function testFormSubmission() {
  try {
    console.log('üß™ Testando submiss√£o do formul√°rio...\n');

    // 1. Criar um pagamento para testar
    console.log('1Ô∏è‚É£ Criando pagamento para teste...');
    const createPaymentResponse = await axios.post(`${BASE_URL}/api/v1/payments/create`, {
      amount: 25.00,
      currency: 'MZN',
      customer: {
        phone: '+258841234567',
        name: 'Teste Formul√°rio',
        email: 'teste@example.com'
      },
      returnUrl: 'https://example.com/success'
    }, {
      headers: {
        'X-API-Key': API_KEY,
        'Content-Type': 'application/json'
      }
    });

    if (createPaymentResponse.data.success) {
      const paymentData = createPaymentResponse.data.data;
      console.log('‚úÖ Pagamento criado com sucesso!');
      console.log(`   ID: ${paymentData.externalPayment.id}`);
      console.log(`   Link: ${paymentData.link}`);
      console.log(`   Tipo: ${paymentData.responseType}\n`);

      // 2. Testar formul√°rio de pagamento
      console.log('2Ô∏è‚É£ Testando acesso ao formul√°rio...');
      try {
        const formResponse = await axios.get(`${paymentData.link}`);
        if (formResponse.status === 200) {
          console.log('‚úÖ Formul√°rio de pagamento acess√≠vel!');
          console.log(`   URL: ${paymentData.link}`);
          
          // Verificar se o HTML cont√©m os elementos necess√°rios
          const html = formResponse.data;
          const hasForm = html.includes('id="paymentForm"');
          const hasPhoneInput = html.includes('id="phone"');
          const hasSubmitButton = html.includes('type="submit"');
          const hasMethodPost = html.includes('method="POST"');
          const hasAction = html.includes('action="javascript:void(0);"');
          
          console.log(`   ‚úÖ Formul√°rio: ${hasForm ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Campo telefone: ${hasPhoneInput ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Bot√£o submit: ${hasSubmitButton ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Method POST: ${hasMethodPost ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Action correto: ${hasAction ? 'Presente' : 'Ausente'}`);
          
          // Verificar se h√° JavaScript para prevenir submiss√£o padr√£o
          const hasPreventDefault = html.includes('e.preventDefault()');
          const hasFetchCall = html.includes('fetch(\'/api/v1/payments/process-mpesa\'');
          
          console.log(`   ‚úÖ preventDefault: ${hasPreventDefault ? 'Presente' : 'Ausente'}`);
          console.log(`   ‚úÖ Fetch call: ${hasFetchCall ? 'Presente' : 'Ausente'}`);
          
          if (!hasPreventDefault) {
            console.log('   ‚ö†Ô∏è ATEN√á√ÉO: preventDefault() n√£o encontrado!');
          }
          if (!hasFetchCall) {
            console.log('   ‚ö†Ô∏è ATEN√á√ÉO: Fetch call n√£o encontrado!');
          }
        }
      } catch (formError) {
        console.log('‚ùå Erro ao acessar formul√°rio:', formError.message);
      }

      // 3. Testar processamento M-Pesa diretamente
      console.log('\n3Ô∏è‚É£ Testando processamento M-Pesa diretamente...');
      const mpesaResponse = await axios.post(`${BASE_URL}/api/v1/payments/process-mpesa`, {
        paymentId: paymentData.externalPayment.id,
        phone: '+258841234567',
        amount: 25.00,
        currency: 'MZN'
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (mpesaResponse.data.success) {
        console.log('‚úÖ Pagamento M-Pesa processado com sucesso!');
        console.log(`   Transaction ID: ${mpesaResponse.data.data.transactionId}`);
        console.log(`   Status: ${mpesaResponse.data.data.status}`);
      } else {
        console.log('‚ùå Erro ao processar pagamento M-Pesa:', mpesaResponse.data.message);
      }

    } else {
      console.log('‚ùå Erro ao criar pagamento:', createPaymentResponse.data.message);
    }

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Dados:', error.response.data);
    }
  }
}

async function runTest() {
  console.log('üöÄ Iniciando teste de submiss√£o do formul√°rio...\n');
  
  await testFormSubmission();
  
  console.log('\n‚ú® Teste conclu√≠do!');
  console.log('\nüîç Para debugar o problema:');
  console.log('   1. Abra o DevTools (F12)');
  console.log('   2. V√° para a aba Console');
  console.log('   3. Acesse o formul√°rio de pagamento');
  console.log('   4. Digite um telefone v√°lido');
  console.log('   5. Clique em "Pagar com M-Pesa"');
  console.log('   6. Verifique os logs no console');
  console.log('   7. Verifique se h√° erros JavaScript');
}

// Executar teste se o script for chamado diretamente
if (require.main === module) {
  runTest().catch(console.error);
}

module.exports = {
  testFormSubmission,
  runTest
};
